configfile: "config/config.yml"

##################################################################
##                         Author Info                          ##
##################################################################

# Author: Kevin A. Boyd
# Email: kevinboyd76@gmail.com
# GitHub: https://github.com/kevinboyd76
# Date Created: May 27, 2025
# Last Modified: June 2, 2025
# Version: 1.0.0
#
# Description: This workflow processes SLAM-Seq data from raw FASTQ
# files to normalized signal tracks with spike-in and scale factor 
# correction.
# 
# Adapted from: SLAM-Seq Protocol from Rafal Donczew & John Ridenour

##################################################################
##                  Specific Steps in Pipeline                  ##
##################################################################

#  Steps:
#  1) FastQC / MultiQC (Raw Samples)
#  2) Process raw Fastq UMIs
#  3) Adapter Trim (BBDuk)
#  4) FastQC / MultiQC (Trimmed Samples)
#  5) Run slam dunk all
#  6) Run slam dunk count
#  7) Run alleyoop rates
#  8) Run alleyoop tccontext
#  9) Run alleyoop utrrates
# 10) Run alleyoop snpeval
# 11) Run alleyoop summary
# 12) Run alleyoop merge
# 13) Run alleyoop tcperreadpos
# 14) Run alleyoop dump
# 15) Run multiqc on slam dunk output


##################################################################
##                    Define input functions                    ##
##################################################################

import os
import pandas as pd

# load samples table and set samples naming
samples_df = pd.read_csv("config/samples.csv").set_index("sample", drop=False)
SAMPLES = samples_df.index.tolist()

# dictionary based input function
def fq_dict_from_sample(wildcards):
    """
    Return a dict: {"r1": <R1path>, "r2": <R2path>} for each sample.
    Use 'unpack(...)' in the rules so we can reference input.r1, input.r2.
    """
    row = samples_df.loc[wildcards.sample]
    return {
        "r1": row["fastq1"],
        "r2": row["fastq2"]
    }

# Extract unique merge groups from the new column (e.g. DMSO, IAA, etc.)
merge_groups = samples_df["merge_group"].unique().tolist()

# define begraphs input for average scale factor (CPM) tracks
def bedgraphs_for_group(wildcards):
    """
    Return a list of bedGraph files belonging to 'merge_group' == wildcards.group.
    """
    # Filter samples by group
    samples_in_group = [
        s for s in SAMPLES
        if samples_df.loc[s, "merge_group"] == wildcards.group
    ]
    # Build the bedGraph filenames for those samples
    return [
        f"results/bedgraph/cpm/{sample}_cpm.bg"
        for sample in samples_in_group
    ]

# define bedgraphs input for average spike in tracks
def spikein_bedgraphs_for_group(wildcards):
    """
    Return a list of spike-in normalized bedGraph files for the given merge_group.
    """
    samples_in_group = [
        s for s in SAMPLES
        if samples_df.loc[s, "merge_group"] == wildcards.group
    ]
    return [
        f"results/bedgraph/spikein/{sample}_spikein.bg"
        for sample in samples_in_group
    ]

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # 1) FastQC / MultiQC reports for raw data
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        "results/qc/raw/multiqc/multiqc_report.html",

        # 2) Processed UMIs from raw FASTQ files
        expand("results/fastp/{sample}_umi_R1.fastq.gz", sample=SAMPLES),
        expand("results/fastp/{sample}_umi_R2.fastq.gz", sample=SAMPLES),
        
        # 3) Trim Adapters in FASTQ files
        expand("results/trimmed/{sample}_R1_trimmed.fastq.gz", sample=SAMPLES),
        expand("results/trimmed/{sample}_R2_trimmed.fastq.gz", sample=SAMPLES),
        
        # FastQC / MultiQC reports for trimmed data
        expand("results/qc/trimmed/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        "results/qc/trimmed/multiqc/multiqc_report.html",

	# Slam Dunk and Alleyoop Outputs
        "results/slamdunk_scer/alleyoop/merge_totalreadcount.tsv",
        "results/slamdunk_scer/alleyoop/merge_onetcreadcount.tsv",
        "results/slamdunk_scer/alleyoop/merge_twotcreadcount.tsv",
        "results/slamdunk_scer/alleyoop/summary_onetcreadcount.tsv",
        "results/slamdunk_scer/alleyoop/summary_twotcreadcount.tsv",


##################################################################
##                     Fastqc on Raw Fastqs                     ##
##################################################################

rule fastqc_raw:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/raw/fastqc/{sample}_R1_fastqc.html",
        zip1 ="results/qc/raw/fastqc/{sample}_R1_fastqc.zip",
        html2="results/qc/raw/fastqc/{sample}_R2_fastqc.html",
        zip2 ="results/qc/raw/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_raw.log"
    shell:
        """
        fastqc -o results/qc/raw/fastqc {input.r1} {input.r2} 2> {log}

        dir="results/qc/raw/fastqc"
        baseR1=$(basename {input.r1} .fastq.gz)
        mv $dir/${{baseR1}}_fastqc.html {output.html1} || true
        mv $dir/${{baseR1}}_fastqc.zip {output.zip1} || true

        baseR2=$(basename {input.r2} .fastq.gz)
        mv $dir/${{baseR2}}_fastqc.html {output.html2} || true
        mv $dir/${{baseR2}}_fastqc.zip {output.zip2} || true
        """


##################################################################
##                     Multiqc on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/raw/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/raw/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_raw.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/raw/fastqc -o {params.outdir} 2> {log}
        """


##################################################################
##                    Process UMIs with Fastp                   ##
##################################################################

rule process_umis:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_umi="results/fastp/{sample}_umi_R1.fastq.gz",
        r2_umi="results/fastp/{sample}_umi_R2.fastq.gz"
    envmodules:
        config["fastp"]
    log:
        "results/logs/fastp/{sample}_umi.log"
    shell:
        """
        fastp --in1 {input.r1} \
            --in2 {input.r2} \
            --out1 {output.r1_umi} \
            --out2 {output.r2_umi} \
            --umi \
            --umi_loc read2 \
            --umi_len 12 \
            --disable_adapter_trimming \
            --disable_trim_poly_g \
            --disable_quality_filtering \
            --disable_length_filtering \
	    --json results/logs/fastp/{wildcards.sample}_umi_fastp.json \
	    --html results/logs/fastp/{wildcards.sample}_umi_fastp.html \
            2> {log}
        """


##################################################################
##                      Adapter Trimming                        ##
##################################################################

rule trim_adapters:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    params:
        bbmap_ref=config["bbmap_ref"]
    envmodules:
        config["bbmap"]
    log:
        "results/logs/trim/{sample}.log"
    shell:
        """
        bbduk.sh \
            in1={input.r1} \
            in2={input.r2} \
            out1={output.r1_trim} \
            out2={output.r2_trim} \
            ref={params.bbmap_ref} \
            trimpolyg=12 \
		trimpolya=12 \
    		k=13 \
    		ktrim=r \
    		mink=5 \
    		qtrim=r \
    		trimq=10 \
    		minlength=20 \
            2> {log}
        """


##################################################################
##                   Fastqc on Trimmed Fastqs                   ##
##################################################################

rule fastqc_trimmed:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    output:
        html3="results/qc/trimmed/fastqc/{sample}_R1_fastqc.html",
        zip3 ="results/qc/trimmed/fastqc/{sample}_R1_fastqc.zip",
        html4="results/qc/trimmed/fastqc/{sample}_R2_fastqc.html",
        zip4 ="results/qc/trimmed/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_trimmed.log"
    shell:
        """
        fastqc -o results/qc/trimmed/fastqc {input.r1_trim} {input.r2_trim} 2> {log}

        dir="results/qc/trimmed/fastqc"
        baseR1=$(basename {input.r1_trim} .fastq.gz)
        mv $dir/${{baseR1}}_fastqc.html {output.html3} || true
        mv $dir/${{baseR1}}_fastqc.zip {output.zip3} || true

        baseR2=$(basename {input.r2_trim} .fastq.gz)
        mv $dir/${{baseR2}}_fastqc.html {output.html4} || true
        mv $dir/${{baseR2}}_fastqc.zip {output.zip4} || true
        """


##################################################################
##                   Multiqc on Trimmed Fastqs                  ##
##################################################################

rule multiqc_trimmed:
    input:
        expand("results/qc/trimmed/fastqc/{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/trimmed/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/trimmed/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_trimmed.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/trimmed/fastqc -o {params.outdir} 2> {log}
        """


##################################################################
##                         Slam Dunk All                        ##
##################################################################

rule slamdunk_all:
    input:
        expand("results/trimmed/{sample}_R1_trimmed.fastq.gz", sample=SAMPLES),
        expand("results/trimmed/{sample}_R2_trimmed.fastq.gz", sample=SAMPLES)
    output:
        "results/slamdunk_scer/count_twotcreadcount"
    params:
        reference=config["slamdunk_ref"],
        bed=config["bed_file"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/slamdunk/slamdunk_all.log"
    shell:
        """
        slamdunk all --reference {params.reference} --bed {params.bed} --outputDir {output} --threads 24 \
            --trim-5p {config[trim_5p]} --topn {config[topn]} --multimap --min-coverage {config[min_coverage]} \
            --var-fraction {config[var_fraction]} --max-read-length {config[max_read_length]} \
            --min-base-qual {config[min_base_qual]} --skip-sam
        """


##################################################################
##                        Slam Dunk Count                       ##
##################################################################

rule slamdunk_count:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/count_twotcreadcount"
    params:
        reference=config["slamdunk_ref"],
        bed=config["bed_file"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/slamdunk/slamdunk_count.log"
    shell:
        """
        slamdunk count --reference {params.reference} --bed {params.bed} --snp-directory {output}/snp \
            --outputDir {output} --max-read-length {config[max_read_length]} --min-base-qual {config[min_base_qual]} \
            --conversion-threshold 2 --threads 24
        """


##################################################################
##                        Alleyoop Rates                        ##
##################################################################

rule alleyoop_rates:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/alleyoop/rates"
    params:
	slamdunk_ref = config["slamdunk_ref"],
	min_base_qual = config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_rates.log"
    shell:
        """
        alleyoop rates --outputDir {output} --reference {params.slamdunk_ref} --min-basequality {params.min_base_qual} \
            --threads 24
        """


##################################################################
##                      Alleyoop TCcontext                      ##
##################################################################

rule alleyoop_tccontext:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/alleyoop/tccontext"
    params:
        slamdunk_ref = config["slamdunk_ref"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_tccontext.log"
    shell:
        """
        alleyoop tccontext --outputDir {output} --reference {params.slamdunk_ref} --min-basequality {params.min_base_qual} \
            --threads 24
        """


##################################################################
##                       Alleyoop UTRrates                      ##
##################################################################

rule alleyoop_utrrates:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/alleyoop/utrrates"
    params:
        slamdunk_ref = config["slamdunk_ref"],
        bed_file = config["bed_file"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["alleyoop"]
    log:
        "results/logs/alleyoop/alleyoop_utrrates.log"
    shell:
        """
        alleyoop utrrates --outputDir {output} --reference {params.slamdunk_ref} --bed {params.bed_file} \
            --multiTCStringency --max-read-length {params.max_read_length} --min-basequality {params.min_base_qual} \
            --threads 24
        """


##################################################################
##                       Alleyoop SNPeval                       ##
##################################################################

rule alleyoop_snpeval:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/alleyoop/snpeval"
    params:
        slamdunk_ref = config["slamdunk_ref"],
        bed_file = config["bed_file"],
        min_coverage = config["min_coverage"],
        var_fraction = config["var_fraction"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["alleyoop"]
    log:
        "results/logs/alleyoop/alleyoop_snpeval.log"
    shell:
        """
        alleyoop snpeval --outputDir {output} --snp-directory {output}/snp --reference {params.slamdunk_ref} \
            --bed {params.bed_file} --min-coverage {params.min_coverage} --var-fraction {params.var_fraction} \
            --multiTCStringency --max-read-length {params.max_read_length} --min-base-qual {params.min_base_qual} \
            --threads 24
        """



##################################################################
##                      Alleyoop Summary 1                      ##
##################################################################

rule alleyoop_summary_onetcreadcount:
    input:
        "results/slamdunk_scer/count_onetcreadcount/*.tsv"
    output:
        "results/slamdunk_scer/alleyoop/summary_onetcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_summary_onetcreadcount.log"
    shell:
        """
        alleyoop summary --output {output} --tcountDir {input} --threads 24
        """


##################################################################
##                      Alleyoop Summary 2                      ##
##################################################################

rule alleyoop_summary_twotcreadcount:
    input:
        "results/slamdunk_scer/count_twotcreadcount/*.tsv"
    output:
        "results/slamdunk_scer/alleyoop/summary_twotcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_summary_twotcreadcount.log"
    shell:
        """
        alleyoop summary --output {output} --tcountDir {input} --threads 24
        """


##################################################################
##                   Alleyoop Summary 1 Merged                  ##
##################################################################

rule alleyoop_merge_onetcreadcount:
    input:
        "results/slamdunk_scer/count_onetcreadcount/*.tsv"
    output:
        "results/slamdunk_scer/alleyoop/merge_onetcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_merge_onetcreadcount.log"
    shell:
        """
        alleyoop merge --output {output} --column "TcReadCount" {input} --threads 24
        """


##################################################################
##                   Alleyoop Summary 2 Merged                  ##
##################################################################

rule alleyoop_merge_twotcreadcount:
    input:
        "results/slamdunk_scer/count_twotcreadcount/*.tsv"
    output:
        "results/slamdunk_scer/alleyoop/merge_twotcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_merge_twotcreadcount.log"
    shell:
        """
        alleyoop merge --output {output} --column "TcReadCount" {input} --threads 24
        """


##################################################################
##                     Alleyoop TCperReadpos                    ##
##################################################################

rule alleyoop_tcperreadpos:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/alleyoop/tcperreadpos"
    params:
        slamdunk_ref = config["slamdunk_ref"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["alleyoop"]
    log:
        "results/logs/alleyoop/alleyoop_tcperreadpos.log"
    shell:
        """
        alleyoop tcperreadpos --outputDir {output} --reference {params.slamdunk_ref} --snp-directory {output}/snp \
            --max-read-length {params.max_read_length} --min-basequality {params.min_base_qual} --threads 24
        """


##################################################################
##                         Alleyoop Dump                        ##
##################################################################

rule alleyoop_dump:
    input:
        "results/slamdunk_scer/filter/*.bam"
    output:
        "results/slamdunk_scer/alleyoop/dump"
    params:
        slamdunk_ref = config["slamdunk_ref"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["alleyoop"]
    log:
        "results/logs/alleyoop/alleyoop_dump.log"
    shell:
        """
        alleyoop dump --outputDir {output} --reference {params.slamdunk_ref} --snp-directory {output}/snp \
            --min-basequality {params.min_base_qual} --threads 24
        """


##################################################################
##                  MultiQC on Slam Dunk Output                 ##
##################################################################

rule multiqc_slamdunk:
    input:
        expand("results/slamdunk_scer/alleyoop/{sample}_rates", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_tccontext", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_utrrates", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_snpeval", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_summary", sample=SAMPLES)
    output:
        "results/logs/multiqc/slamdunk_scer/multiqc_report.html"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/slamdunk_scer/multiqc_slamdunk_report.log"
    shell:
        """
        multiqc results/slamdunk_scer/alleyoop -o {output} --quiet
        """
