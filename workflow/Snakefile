configfile: "config/config.yml"

##################################################################
##                         Author Info                          ##
##################################################################

# Author: Kevin A. Boyd
# Email: kevinboyd76@gmail.com
# GitHub: https://github.com/kevinboyd76
# Date Created: May 27, 2025
# Last Modified: June 12, 2025
# Version: 1.0.0
#
# Description: This workflow processes SLAM-Seq data from raw FASTQ
# files to normalized signal tracks with spike-in and scale factor 
# correction.
# 
# Adapted from: SLAM-Seq Protocol from Rafal Donczew & John Ridenour

##################################################################
##                  Specific Steps in Pipeline                  ##
##################################################################

# Steps:
#  1) FastQC / MultiQC (Raw Samples)
#  2) Process Raw Fastq UMIs - Unique Molecular Identifiers
#  3) Adapter Trim (BBDuk)
#  4) FastQC / MultiQC (Trimmed Samples)
#  5) Run Slam Dunk All
#  6) Run Slam Dunk Count
#  7) Run Alleyoop Summary and Merge
#  8) Run Alleyoop Outputs (rates, context, UTR reads, and SNP evaluations)
#  9) Run Slam Dunk and Alleyoop Merged Outputs
# 10) Run MultiQC on Slam Dunk Outputs

##################################################################
##                    Define input functions                    ##
##################################################################

import os
import pandas as pd

# load samples table and set samples naming
samples_df = pd.read_csv("config/samples.csv").set_index("sample", drop=False)
SAMPLES = samples_df.index.tolist()

# dictionary based input function
def fq_dict_from_sample(wildcards):
    """
    Return a dict: {"r1": <R1path>, "r2": <R2path>} for each sample.
    Use 'unpack(...)' in the rules so we can reference input.r1, input.r2.
    """
    row = samples_df.loc[wildcards.sample]
    return {
        "r1": row["fastq1"],
        "r2": row["fastq2"]
    }

# Function to return fastq files from "results/trimmed" folder based on sample name
def fq_dict_trimmed_sample(wildcards):
    sample = wildcards.sample
    trimmed_dir = "results/trimmed"
    
    # Get all R1 and R2 files for the sample
    r1_files = sorted([f"{trimmed_dir}/{sample}_R1_trimmed.fastq.gz"])
    r2_files = sorted([f"{trimmed_dir}/{sample}_R2_trimmed.fastq.gz"])

    # Ensure both R1 and R2 files are available
    if len(r1_files) != len(r2_files):
        raise ValueError(f"Mismatch in number of R1 and R2 files for sample {sample}.")

    # Return a combined list of R1 and R2 files
    return r1_files + r2_files

# Extract unique merge groups from the new column (e.g. DMSO, IAA, etc.)
merge_groups = samples_df["merge_group"].unique().tolist()


##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # 1) FastQC / MultiQC reports for raw data
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        "results/qc/raw/multiqc/multiqc_report.html",

        # 2) Processed UMIs from raw FASTQ files
        expand("results/fastp/{sample}_umi_R1.fastq.gz", sample=SAMPLES),
        expand("results/fastp/{sample}_umi_R2.fastq.gz", sample=SAMPLES),
        
        # 3) Trim Adapters in FASTQ files
        expand("results/trimmed/{sample}_R1_trimmed.fastq.gz", sample=SAMPLES),
        expand("results/trimmed/{sample}_R2_trimmed.fastq.gz", sample=SAMPLES),
        
        # 4) FastQC / MultiQC reports for trimmed data
        expand("results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.html", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.html", sample=SAMPLES),
        "results/qc/trimmed/multiqc/multiqc_report.html",

        # 5) Filtered BAM, count, and bedgraph files from Slam Dunk All
        expand("results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
	expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),
	expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph", sample=SAMPLES),
	expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph", sample=SAMPLES),

        # 6) Slam Dunk Count files and rename one tc count folder
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),
	"results/slamdunk_scer/count_onetcreadcount/done.txt"

        # 7) Alleyoop outputs
        #expand("results/slamdunk_scer/alleyoop/{sample}_rates", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_tccontext", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_utrrates", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_snpeval", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_summary", sample=SAMPLES),

        # 8) Slam Dunk and Alleyoop Merged Outputs
        #expand("results/slamdunk_scer/alleyoop/{sample}_merge_totalreadcount.tsv", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_merge_onetcreadcount.tsv", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_merge_twotcreadcount.tsv", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_summary_onetcreadcount.tsv", sample=SAMPLES),
        #expand("results/slamdunk_scer/alleyoop/{sample}_summary_twotcreadcount.tsv", sample=SAMPLES),

        # 9) Final MultiQC on Slam Dunk Outputs
        #"results/logs/multiqc/slamdunk_scer/multiqc_report.html"


##################################################################
##                     Fastqc on Raw Fastqs                     ##
##################################################################

rule fastqc_raw:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/raw/fastqc/{sample}_R1_fastqc.html",
        zip1 ="results/qc/raw/fastqc/{sample}_R1_fastqc.zip",
        html2="results/qc/raw/fastqc/{sample}_R2_fastqc.html",
        zip2 ="results/qc/raw/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_raw.log"
    shell:
        """
        fastqc -o results/qc/raw/fastqc {input.r1} {input.r2} 2> {log}

        dir="results/qc/raw/fastqc"
        baseR1=$(basename {input.r1} .fastq.gz)
        mv $dir/${{baseR1}}_fastqc.html {output.html1} || true
        mv $dir/${{baseR1}}_fastqc.zip {output.zip1} || true

        baseR2=$(basename {input.r2} .fastq.gz)
        mv $dir/${{baseR2}}_fastqc.html {output.html2} || true
        mv $dir/${{baseR2}}_fastqc.zip {output.zip2} || true
        """


##################################################################
##                     Multiqc on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/raw/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/raw/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_raw.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/raw/fastqc -o {params.outdir} 2> {log}
        """


##################################################################
##                    Process UMIs with Fastp                   ##
##################################################################

rule process_umis:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_umi="results/fastp/{sample}_umi_R1.fastq.gz",
        r2_umi="results/fastp/{sample}_umi_R2.fastq.gz"
    params:
        umi_loc=config["umi_loc"],
	umi_len=config["umi_len"]
    envmodules:
        config["fastp"]
    log:
        "results/logs/fastp/{sample}_umi.log"
    shell:
        """
        fastp --in1 {input.r1} \
            --in2 {input.r2} \
            --out1 {output.r1_umi} \
            --out2 {output.r2_umi} \
            --umi \
            --umi_loc {params.umi_loc} \
            --umi_len {params.umi_len} \
            --disable_adapter_trimming \
            --disable_trim_poly_g \
            --disable_quality_filtering \
            --disable_length_filtering \
	    --json results/logs/fastp/{wildcards.sample}_umi_fastp.json \
	    --html results/logs/fastp/{wildcards.sample}_umi_fastp.html \
            2> {log}
        """


##################################################################
##                      Adapter Trimming                        ##
##################################################################

rule trim_adapters:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    params:
        bbmap_ref=config["bbmap_ref"]
    envmodules:
        config["bbmap"]
    log:
        "results/logs/trim/{sample}.log"
    shell:
        """
        # Ensure the trimmed directory exists
        mkdir -p results/trimmed

        bbduk.sh \
            in1={input.r1} \
            in2={input.r2} \
            out1={output.r1_trim} \
            out2={output.r2_trim} \
            ref={params.bbmap_ref} \
            trimpolyg=12 \
	    trimpolya=12 \
            k=13 \
    	    ktrim=r \
    	    mink=5 \
            qtrim=r \
    	    trimq=10 \
    	    minlength=20 \
            2> {log}
        """


##################################################################
##                   Fastqc on Trimmed Fastqs                   ##
##################################################################

rule fastqc_trimmed:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz",
        r2_trim="results/trimmed/{sample}_R2_trimmed.fastq.gz"
    output:
        html3="results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.html",
        zip3 ="results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.zip",
        html4="results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.html",
        zip4 ="results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_trimmed.log"
    shell:
        """
	mkdir -p results/qc/trimmed/fastqc
        fastqc -o results/qc/trimmed/fastqc {input.r1_trim} {input.r2_trim} 2> {log}
        """


##################################################################
##                   Multiqc on Trimmed Fastqs                  ##
##################################################################

rule multiqc_trimmed:
    input:
        expand("results/qc/trimmed/fastqc/{sample}_R1_trimmed_fastqc.zip", sample=SAMPLES),
        expand("results/qc/trimmed/fastqc/{sample}_R2_trimmed_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/trimmed/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/trimmed/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_trimmed.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/trimmed/fastqc -o {params.outdir} 2> {log}
        """


##################################################################
##                        Rename R1 files                       ##
##################################################################

# new rule
rule rename_trimmed_fastqs:
    input:
        r1_trim="results/trimmed/{sample}_R1_trimmed.fastq.gz"
    output:
        r1_trim_rename="results/trimmed/{sample}_trimmed.fastq.gz"
    log:
        "results/logs/trimmed/rename_trimmed_fastqs_{sample}.log"
    shell:
        """
        cp {input} {output}
        """


##################################################################
##                         Slam Dunk All                        ##
##################################################################

rule slamdunk_all:
    input:
        fastqs="results/trimmed/{sample}_trimmed.fastq.gz"
    output:
        bams="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam",
	counts="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv",
	minus_bedgraph="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph",
	plus_bedgraph="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph"
    params:
        scer_genome=config["scer_genome"],
        scer_bed=config["bed_file"],
	trim_5p=config["trim_5p"],
	topn=config["topn"],
	max_read_len=config["max_read_length"],
	min_base_qual=config["min_base_qual"],
	var_fraction=config["var_fraction"],
	min_coverage=config["min_coverage"],
	output_dir="results/slamdunk_scer"
    envmodules:
        config["slamdunk"],
	config["nextgenmap"],
	config["varscan"],
	config["samtools"]
    log:
        "results/logs/slamdunk/slamdunk_all_{sample}.log"
    shell:
        """
	# show files input for slamdunk all
    	echo "Input files: {input.fastqs}"

	# make sure directory is present 
	mkdir -p {params.output_dir}

	# run slamdunk all
        slamdunk all \
		--reference {params.scer_genome} \
		--bed {params.scer_bed} \
		--outputDir {params.output_dir} \
		--trim-5p {params.trim_5p} \
		--topn {params.topn} \
		--multimap \
		--min-coverage {params.min_coverage} \
		--var-fraction {params.var_fraction} \
		--max-read-length {params.max_read_len} \
		--min-base-qual {params.min_base_qual} \
		--skip-sam \
		--threads 24 \
		{input.fastqs}
        """


##################################################################
##                        Slam Dunk Count                       ##
##################################################################

rule slamdunk_count:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        bam_out="results/slamdunk_scer/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv"
    params:
        genome=config["scer_genome"],
        bed=config["bed_file"],
	snp_dir="results/slamdunk_scer/all_counts/snp",
	output_dir="results/slamdunk_scer/count_twotcreadcount",
	max_read_len=config["max_read_length"],
	min_base_qual=config["min_base_qual"]
    envmodules:
        config["slamdunk"],
	config["nextgenmap"],
	config["varscan"],
	config["samtools"]
    log:
        "results/logs/slamdunk/slamdunk_count_{sample}.log" 
    shell:
        """
        # Define the output directory
        mkdir -p {params.output_dir}

        # Run slam dunk count
        slamdunk count \
		--reference {params.genome} \
		--bed {params.bed} \
		--snp-directory {params.snp_dir} \
		--outputDir {params.output_dir} \
		--max-read-length {params.max_read_len} \
		--min-base-qual {params.min_base_qual} \
		--conversion-threshold 2 \
		--threads 24 \
		{input.bam}
        """


##################################################################
##              Rename count to count_onetcreadcount            ##
##################################################################

rule count_to_onetcreadcount:
    input:
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),
	expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.log", sample=SAMPLES),
	expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph", sample=SAMPLES),
	expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph", sample=SAMPLES)
    output:
        "results/slamdunk_scer/count_onetcreadcount/done.txt"
    log:
        "results/logs/slamdunk/count_to_onetcreadcount.log"
    shell:
        """
        mv results/slamdunk_scer/count results/slamdunk_scer/count_onetcreadcount
	touch {output}
        """

##################################################################
##                        Alleyoop Rates                        ##
##################################################################

rule alleyoop_rates:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        "results/slamdunk_scer/alleyoop/{sample}_rates"
    params:
        slamdunk_ref=config["scer_genome"],
        min_base_qual=config["min_base_qual"],
	output_dir="results/slamdunk_scer/alleyoop/rates",
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_rates_{sample}.log"
    shell:
        """
        alleyoop rates --outputDir {output} --reference {params.slamdunk_ref} \
            --min-basequality {params.min_base_qual} --threads 24 {input}
        """


##################################################################
##                      Alleyoop TCcontext                      ##
##################################################################

rule alleyoop_tccontext:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.bam", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_tccontext"
    params:
        slamdunk_ref=config["scer_genome"],
        min_base_qual=config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_tccontext_{sample}.log"
    shell:
        """
        alleyoop tccontext --outputDir {output} --reference {params.slamdunk_ref} --min-basequality {params.min_base_qual} \
            --threads 24
        """


##################################################################
##                       Alleyoop UTRrates                      ##
##################################################################

rule alleyoop_utrrates:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.bam", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_utrrates"
    params:
        slamdunk_ref=config["scer_genome"],
        bed_file=config["bed_file"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_utrrates_{sample}.log"
    shell:
        """
        alleyoop utrrates --outputDir {output} --reference {params.slamdunk_ref} --bed {params.bed_file} \
            --multiTCStringency --max-read-length {params.max_read_length} --min-basequality {params.min_base_qual} \
            --threads 24 {input}
        """


##################################################################
##                       Alleyoop SNPeval                       ##
##################################################################

rule alleyoop_snpeval:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.bam", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_snpeval"
    params:
        slamdunk_ref = config["scer_genome"],
        bed_file = config["bed_file"],
        min_coverage = config["min_coverage"],
        var_fraction = config["var_fraction"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_snpeval_{sample}.log"
    shell:
        """
        alleyoop snpeval --outputDir {output} --snp-directory {output}/snp --reference {params.slamdunk_ref} \
            --bed {params.bed_file} --min-coverage {params.min_coverage} --var-fraction {params.var_fraction} \
            --multiTCStringency --max-read-length {params.max_read_length} --min-base-qual {params.min_base_qual} \
            --threads 24 {input}
        """


##################################################################
##                      Alleyoop Summary 1                      ##
##################################################################

rule alleyoop_summary_onetcreadcount:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.tsv", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_summary_onetcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_summary_onetcreadcount_{sample}.log"
    shell:
        """
        alleyoop summary --output {output} --tcountDir {input} --threads 24
        """


##################################################################
##                      Alleyoop Summary 2                      ##
##################################################################

rule alleyoop_summary_twotcreadcount:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.tsv", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_summary_twotcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_summary_twotcreadcount_{sample}.log"
    shell:
        """
        alleyoop summary --output {output} --tcountDir {input} --threads 24
        """


##################################################################
##                   Alleyoop Summary 1 Merged                  ##
##################################################################

rule alleyoop_merge_onetcreadcount:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.tsv", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_merge_onetcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_merge_onetcreadcount_{sample}.log"
    shell:
        """
        alleyoop merge --output {output} --column "TcReadCount" {input} --threads 24
        """


##################################################################
##                   Alleyoop Summary 2 Merged                  ##
##################################################################

rule alleyoop_merge_twotcreadcount:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.tsv", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_merge_twotcreadcount.tsv"
    log:
        "results/logs/alleyoop/alleyoop_merge_twotcreadcount_{sample}.log"
    shell:
        """
        alleyoop merge --output {output} --column "TcReadCount" {input} --threads 24
        """


##################################################################
##                     Alleyoop TCperReadpos                    ##
##################################################################

rule alleyoop_tcperreadpos:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.bam", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_tcperreadpos"
    params:
        slamdunk_ref = config["scer_genome"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_tcperreadpos_{sample}.log"
    shell:
        """
        alleyoop tcperreadpos --outputDir {output} --reference {params.slamdunk_ref} --snp-directory {output}/snp \
            --max-read-length {params.max_read_length} --min-basequality {params.min_base_qual} --threads 24 {input}
        """


##################################################################
##                         Alleyoop Dump                        ##
##################################################################

rule alleyoop_dump:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}.bam", sample=SAMPLES)
    output:
        "results/slamdunk_scer/alleyoop/{sample}_dump"
    params:
        slamdunk_ref = config["scer_genome"],
        min_base_qual = config["min_base_qual"]
    envmodules:
        config["slamdunk"]
    log:
        "results/logs/alleyoop/alleyoop_dump_{sample}.log"
    shell:
        """
        alleyoop dump --outputDir {output} --reference {params.slamdunk_ref} --snp-directory {output}/snp \
            --min-basequality {params.min_base_qual} --threads 24 {input}
        """


##################################################################
##                  MultiQC on Slam Dunk Output                 ##
##################################################################

rule multiqc_slamdunk:
    input:
        expand("results/slamdunk_scer/alleyoop/{sample}_rates", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_tccontext", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_utrrates", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_snpeval", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/{sample}_summary", sample=SAMPLES)
    output:
        "results/logs/multiqc/slamdunk_scer/multiqc_report.html"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/slamdunk_scer/multiqc_slamdunk_report.log"
    shell:
        """
        multiqc results/slamdunk_scer/alleyoop -o {output} --quiet
        """
