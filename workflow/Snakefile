configfile: "config/config.yml"

##################################################################
##                         Author Info                          ##
##################################################################

# Author: Kevin A. Boyd
# Email: kevinboyd76@gmail.com
# GitHub: https://github.com/kevinboyd76
# Date Created: May 27, 2025
# Last Modified: July 22, 2025
# Version: 1.0.1
#
# Description:
# This Snakemake workflow processes SLAM-Seq data from raw paired-end
# FASTQ files through quality control, UMI (unique molecular identifier) extraction,
# adapter trimming, and SLAM-Dunk alignment and mutation quantification.
# It supports both default 1-TC and custom 2-TC conversion thresholds for comparative analysis.
#
# The pipeline optionally supports alignment to a spike-in genome (e.g., *S. pombe*),
# allowing parallel processing for normalization or QC purposes. When enabled,
# spike-in reads are aligned and quantified independently with matching SLAM-Dunk and Alleyoop steps.
#
# Adapted from: SLAM-Seq Protocol from Rafal Donczew & John Ridenour

##################################################################
##                  Specific Steps in Pipeline                  ##
##################################################################

# Steps:
#  1) Quality Control: FastQC / MultiQC (Raw Samples)
#  2) Process Raw Fastq UMIs (Unique Molecular Identifiers) with fastp
#  3) Adapter Trimming with BBDuk or Trim Galore
#  4) Quality Control: FastQC / MultiQC (Trimmed Samples)
#  5) SLAM-Dunk All: Map, Filter, SNP call, T>C Counting (1-TC threshold)
#  6) SLAM-Dunk Count: Re-count with 2-TC threshold
#  7) Alleyoop Outputs: Mutation Rates, Context, UTR Rates, SNP Evaluation
#  8) Alleyoop Summary and Merge
#  9) Quality Control: Final MultiQC Summary of SLAM-Dunk Outputs
# 10) (Optional) Repeat Steps 5â€“9 for Spike-In Genome if `use_spikein: true`

##################################################################
##                    Define input functions                    ##
##################################################################

import os
import pandas as pd

# load samples table and set samples naming
samples_df = pd.read_csv("config/samples.csv").set_index("sample", drop=False)
SAMPLES = samples_df.index.tolist()

# dictionary based input function
def fq_dict_from_sample(wildcards):
    """
    Return a dict: {"r1": <R1path>, "r2": <R2path>} for each sample.
    Use 'unpack(...)' in the rules so we can reference input.r1, input.r2.
    """
    row = samples_df.loc[wildcards.sample]
    return {
        "r1": row["fastq1"],
        "r2": row["fastq2"]
    }

# Function to return fastq files from "results/trimmed" folder based on sample name
def fq_dict_trimmed_sample(wildcards):
    sample = wildcards.sample
    trimmed_dir = "results/trimmed"
    
    # Get all R1 and R2 files for the sample
    r1_files = sorted([f"{trimmed_dir}/{sample}_R1_trimmed.fastq.gz"])
    r2_files = sorted([f"{trimmed_dir}/{sample}_R2_trimmed.fastq.gz"])

    # Ensure both R1 and R2 files are available
    if len(r1_files) != len(r2_files):
        raise ValueError(f"Mismatch in number of R1 and R2 files for sample {sample}.")

    # Return a combined list of R1 and R2 files
    return r1_files + r2_files

# Extract unique merge groups from the new column (e.g. DMSO, IAA, etc.)
merge_groups = samples_df["merge_group"].unique().tolist()

# pull trim galore true/false out
use_trim_galore = config["use_trim_galore"]

# Toggle for spike-in normalization
use_spikein = config["use_spikein"]

# Define spike-in output targets if enabled
spikein_targets = []
if use_spikein:
    spikein_targets = [
        # 5) Filtered BAMs and counts (spike-in)
        expand("results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.log", sample=SAMPLES),
        expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),
        expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph", sample=SAMPLES),
        expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph", sample=SAMPLES),

        # 6) TwoTC count (spike-in)
        expand("results/slamdunk_spikein/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),

        # 7) Alleyoop rates, tccontext, utrrates, snpeval outputs (spike-in)
        expand("results/slamdunk_spikein/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.csv", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.log", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.csv", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.log", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.csv", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.log", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.csv", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.log", sample=SAMPLES),

        # 8) Alleyoop Summary and Merged outputs (spike-in)
        "results/slamdunk_spikein/alleyoop/summary_onetcreadcount.tsv",
        "results/slamdunk_spikein/alleyoop/summary_onetcreadcount.log",
        "results/slamdunk_spikein/alleyoop/summary_twotcreadcount.tsv",
        "results/slamdunk_spikein/alleyoop/summary_twotcreadcount.log",
        "results/slamdunk_spikein/alleyoop/merge_totalreadcount.tsv",
        "results/slamdunk_spikein/alleyoop/merge_onetcreadcount.tsv",
        "results/slamdunk_spikein/alleyoop/merge_twotcreadcount.tsv",

        # 9) TcPerReadPos and TcPerUtrPos and Alleyoop Dump (spike-in)
        expand("results/slamdunk_spikein/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.csv", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.log", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.csv", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.log", sample=SAMPLES),
        expand("results/slamdunk_spikein/alleyoop/dump/{sample}_trimmed.fastq_slamdunk_mapped_filtered_readinfo.sdunk", sample=SAMPLES),

        # 10) Final MultiQC on Slam Dunk Outputs (spike-in)
        "results/qc/slamdunk_spikein/multiqc/multiqc_report.html"
        ]

# Processed outputs produced by the R script
processed_targets = [
    "results/processed/totalreadcounts.csv",
    "results/processed/onetcreadcounts.csv",
    "results/processed/twotcreadcounts.csv",
    "results/processed/totalreadcount_normalization_factors.csv",
    "results/processed/totalreadcount_normalized_twotcreadcounts.csv",
]

if use_spikein:
    processed_targets += [
        "results/processed/totalreadcounts_spikein.csv",
        "results/processed/onetcreadcounts_spikein.csv",
        "results/processed/twotcreadcounts_spikein.csv",
        "results/processed/spikein_normalization_factors.csv",
        "results/processed/spikein_normalized_twotcreadcounts.csv",
    ]

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        # 1) FastQC / MultiQC reports for raw data
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.html", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.html", sample=SAMPLES),
        "results/qc/raw/multiqc/multiqc_report.html",

        # 2) Processed UMIs from raw FASTQ files and append to R1 files
        expand("results/fastp/{sample}_umi_R1.fastq.gz", sample=SAMPLES),
        expand("results/fastp/{sample}_umi_R2.fastq.gz", sample=SAMPLES),
        
        # 3) Trim Adapters in R1 FASTQ files
        expand("results/trimmed/{sample}_trimmed.fastq.gz", sample=SAMPLES),
        
        # 4) FastQC / MultiQC reports for trimmed data
        expand("results/qc/trimmed/fastqc/{sample}_trimmed_fastqc.html", sample=SAMPLES),
        "results/qc/trimmed/multiqc/multiqc_report.html",

        # 5) Filtered BAM, count, and bedgraph files from Slam Dunk All
        expand("results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.log", sample=SAMPLES),
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph", sample=SAMPLES),
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph", sample=SAMPLES),

        # 6) Slam Dunk Count files for twoTCreadcount
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES),

        # 7) Alleyoop rates, tccontext, utrrates, snpeval outputs
        expand("results/slamdunk_scer/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.csv", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.log", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.csv", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.log", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.csv", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.log", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.csv", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.log", sample=SAMPLES),
        
        # 8) Alleyoop Summary and Merged outputs
        "results/slamdunk_scer/alleyoop/summary_onetcreadcount.tsv",
        "results/slamdunk_scer/alleyoop/summary_onetcreadcount.log",
        "results/slamdunk_scer/alleyoop/summary_twotcreadcount.tsv",
        "results/slamdunk_scer/alleyoop/summary_twotcreadcount.log",
        "results/slamdunk_scer/alleyoop/merge_totalreadcount.tsv",
        "results/slamdunk_scer/alleyoop/merge_onetcreadcount.tsv",
        "results/slamdunk_scer/alleyoop/merge_twotcreadcount.tsv",

        # 9) TcPerReadPos and TcPerUtrPos and Alleyoop Dump
        expand("results/slamdunk_scer/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.csv", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.log", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.csv", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.log", sample=SAMPLES),
        expand("results/slamdunk_scer/alleyoop/dump/{sample}_trimmed.fastq_slamdunk_mapped_filtered_readinfo.sdunk", sample=SAMPLES),

        # 10) Final MultiQC on Slam Dunk Outputs
        "results/qc/slamdunk_scer/multiqc/multiqc_report.html",

        # 11) Spike in Analysis (S. pombe)
        *spikein_targets,

        # 12) Processed count matrices & normalization factors
        *processed_targets

##################################################################
##                     Fastqc on Raw Fastqs                     ##
##################################################################

rule fastqc_raw:
    input:
        unpack(fq_dict_from_sample)
    output:
        html1="results/qc/raw/fastqc/{sample}_R1_fastqc.html",
        zip1 ="results/qc/raw/fastqc/{sample}_R1_fastqc.zip",
        html2="results/qc/raw/fastqc/{sample}_R2_fastqc.html",
        zip2 ="results/qc/raw/fastqc/{sample}_R2_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_raw.log"
    shell:
        """
        fastqc -o results/qc/raw/fastqc {input.r1} {input.r2} 2> {log}

        dir="results/qc/raw/fastqc"
        baseR1=$(basename {input.r1} .fastq.gz)
        mv $dir/${{baseR1}}_fastqc.html {output.html1} || true
        mv $dir/${{baseR1}}_fastqc.zip {output.zip1} || true

        baseR2=$(basename {input.r2} .fastq.gz)
        mv $dir/${{baseR2}}_fastqc.html {output.html2} || true
        mv $dir/${{baseR2}}_fastqc.zip {output.zip2} || true
        """


##################################################################
##                     Multiqc on Raw Fastqs                    ##
##################################################################

rule multiqc_raw:
    input:
        expand("results/qc/raw/fastqc/{sample}_R1_fastqc.zip", sample=SAMPLES),
        expand("results/qc/raw/fastqc/{sample}_R2_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/raw/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/raw/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_raw.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/raw/fastqc -o {params.outdir} 2> {log}
        """


##################################################################
##                    Process UMIs with Fastp                   ##
##################################################################

rule process_umis:
    input:
        unpack(fq_dict_from_sample)
    output:
        r1_umi="results/fastp/{sample}_umi_R1.fastq.gz",
        r2_umi="results/fastp/{sample}_umi_R2.fastq.gz"
    params:
        umi_loc=config["umi_loc"],
        umi_len=config["umi_len"]
    envmodules:
        config["fastp"]
    log:
        "results/logs/fastp/{sample}_umi.log"
    shell:
        """
        fastp --in1 {input.r1} \
            --in2 {input.r2} \
            --out1 {output.r1_umi} \
            --out2 {output.r2_umi} \
            --umi \
            --umi_loc {params.umi_loc} \
            --umi_len {params.umi_len} \
            --disable_adapter_trimming \
            --disable_quality_filtering \
            --disable_length_filtering \
            --json results/logs/fastp/{wildcards.sample}_umi_fastp.json \
            --html results/logs/fastp/{wildcards.sample}_umi_fastp.html \
            2> {log}
        """


##################################################################
##            Adapter Trimming (Trim_Galore or BBduk)           ##
##################################################################

rule trim_adapters:
    input:
        r1="results/fastp/{sample}_umi_R1.fastq.gz"
    output:
        r1_trim="results/trimmed/{sample}_trimmed.fastq.gz"
    log:
        "results/logs/trim/{sample}.log"
    params:
        bbmap_ref=config["bbmap_ref"],
        stringency=config["stringency"],
        length=config["length"],
        use_trim_galore=use_trim_galore
    envmodules:
        config["trim_galore"] if use_trim_galore else config["bbmap"]
    shell:
        """
        mkdir -p results/trimmed
        if [ "{params.use_trim_galore}" == "True" ]; then
            trim_galore \
                --stringency {params.stringency} \
                --length {params.length} \
                --cores 4 \
                --gzip \
                --output_dir results/trimmed \
                {input.r1} \
                2> {log}
            base=$(basename {input.r1} .fastq.gz)
            mv results/trimmed/${{base}}_trimmed.fq.gz {output.r1_trim}
        else
            bbduk.sh \
                in1={input.r1} \
                out1={output.r1_trim} \
                ref={params.bbmap_ref} \
                trimpolya=12 \
                k=13 \
                ktrim=r \
                mink=5 \
                qtrim=r \
                trimq=10 \
                minlength=20 \
                2> {log}
        fi
        """


##################################################################
##                   Fastqc on Trimmed Fastqs                   ##
##################################################################

rule fastqc_trimmed:
    input:
        r1_trim="results/trimmed/{sample}_trimmed.fastq.gz"
    output:
        html3="results/qc/trimmed/fastqc/{sample}_trimmed_fastqc.html",
        zip3 ="results/qc/trimmed/fastqc/{sample}_trimmed_fastqc.zip"
    envmodules:
        config["fastqc"]
    log:
        "results/logs/fastqc/{sample}_trimmed.log"
    shell:
        """
        mkdir -p results/qc/trimmed/fastqc
        fastqc -o results/qc/trimmed/fastqc {input.r1_trim} 2> {log}
        """


##################################################################
##                   Multiqc on Trimmed Fastqs                  ##
##################################################################

rule multiqc_trimmed:
    input:
        expand("results/qc/trimmed/fastqc/{sample}_trimmed_fastqc.zip", sample=SAMPLES)
    output:
        "results/qc/trimmed/multiqc/multiqc_report.html"
    params:
        outdir="results/qc/trimmed/multiqc"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/multiqc_trimmed.log"
    shell:
        """
        rm -rf {params.outdir}
        mkdir -p {params.outdir}
        multiqc results/qc/trimmed/fastqc -o {params.outdir} 2> {log}
        """


##################################################################
##                         Slam Dunk All                        ##
##################################################################

rule slamdunk_all:
    input:
        fastqs="results/trimmed/{sample}_trimmed.fastq.gz"
    output:
        bams="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam",
        logs="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.log",
        counts="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv",
        minus_bedgraph="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph",
        plus_bedgraph="results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph"
    params:
        scer_genome=config["scer_genome"],
        scer_bed=config["scer_bed"],
        trim_5p=config["trim_5p"],
        topn=config["topn"],
        max_read_len=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        var_fraction=config["var_fraction"],
        min_coverage=config["min_coverage"],
        output_dir="results/slamdunk_scer"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"],
        config["samtools"]
    log:
        "results/logs/slamdunk/slamdunk_all_{sample}.log"
    shell:
        """
        # show files input for slamdunk all
        echo "Input files: {input.fastqs}"

        # make sure directory is present 
        mkdir -p {params.output_dir}

        # run slamdunk all
        slamdunk all \
            --reference {params.scer_genome} \
            --bed {params.scer_bed} \
            --outputDir {params.output_dir} \
            --trim-5p {params.trim_5p} \
            --topn {params.topn} \
            --multimap \
            --min-coverage {params.min_coverage} \
            --var-fraction {params.var_fraction} \
            --max-read-length {params.max_read_len} \
            --min-base-qual {params.min_base_qual} \
            --skip-sam \
            --threads 24 \
            {input.fastqs}
        """


##################################################################
##                        Slam Dunk Count                       ##
##################################################################

rule slamdunk_count:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        bam_out="results/slamdunk_scer/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv"
    params:
        genome=config["scer_genome"],
        bed=config["scer_bed"],
        snp_dir="results/slamdunk_scer/snp",
        output_dir="results/slamdunk_scer/count_twotcreadcount",
        max_read_len=config["max_read_length"],
        min_base_qual=config["min_base_qual"]
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"],
        config["samtools"]
    log:
        "results/logs/slamdunk/slamdunk_count_{sample}.log" 
    shell:
        """
        # Define the output directory
        mkdir -p {params.output_dir}

        # Run slam dunk count
        slamdunk count \
            --reference {params.genome} \
            --bed {params.bed} \
            --snp-directory {params.snp_dir} \
            --outputDir {params.output_dir} \
            --max-read-length {params.max_read_len} \
            --min-base-qual {params.min_base_qual} \
            --conversion-threshold 2 \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                        Alleyoop Rates                        ##
##################################################################

rule alleyoop_rates:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        rates="results/slamdunk_scer/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.csv",
        rates_logs="results/slamdunk_scer/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.log"
    params:
        slamdunk_ref=config["scer_genome"],
        min_base_qual=config["min_base_qual"],
        output_dir="results/slamdunk_scer/alleyoop/rates"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_rates_{sample}.log"
    shell:
        """
        alleyoop rates \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                      Alleyoop TCcontext                      ##
##################################################################

rule alleyoop_tccontext:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        tccontext="results/slamdunk_scer/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.csv",
        tccontext_log="results/slamdunk_scer/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.log"
    params:
        slamdunk_ref=config["scer_genome"],
        min_base_qual=config["min_base_qual"],
        output_dir="results/slamdunk_scer/alleyoop/tccontext"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_tccontext_{sample}.log"
    shell:
        """
        alleyoop tccontext \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                       Alleyoop UTRrates                      ##
##################################################################

rule alleyoop_utrrates:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        utrrates="results/slamdunk_scer/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.csv",
        utrrates_log="results/slamdunk_scer/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.log"
    params:
        slamdunk_ref=config["scer_genome"],
        bed_file=config["scer_bed"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        output_dir="results/slamdunk_scer/alleyoop/utrrates"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_utrrates_{sample}.log"
    shell:
        """
        alleyoop utrrates \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --bed {params.bed_file} \
            --multiTCStringency \
            --max-read-length {params.max_read_length} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                       Alleyoop SNPeval                       ##
##################################################################

rule alleyoop_snpeval:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        snp_eval="results/slamdunk_scer/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.csv",
        snp_eval_log="results/slamdunk_scer/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.log"
    params:
        slamdunk_ref = config["scer_genome"],
        bed_file = config["scer_bed"],
        min_coverage = config["min_coverage"],
        var_fraction = config["var_fraction"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"],
        output_dir="results/slamdunk_scer/alleyoop/snpeval",
        snp_dir="results/slamdunk_scer/snp"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_snpeval_{sample}.log"
    shell:
        """
        alleyoop snpeval \
            --outputDir {params.output_dir} \
            --snp-directory {params.snp_dir} \
            --reference {params.slamdunk_ref} \
            --bed {params.bed_file} \
            --min-coverage {params.min_coverage} \
            --var-fraction {params.var_fraction} \
            --multiTCStringency \
            --max-read-length {params.max_read_length} \
            --min-base-qual {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                      Alleyoop Summary 1                      ##
##################################################################

rule alleyoop_summary_onetcreadcount:
    input:
        bams=expand("results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        tcounts=expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        summary="results/slamdunk_scer/alleyoop/summary_onetcreadcount.tsv",
        summary_log="results/slamdunk_scer/alleyoop/summary_onetcreadcount.log"
    params:
        tcount_dir="results/slamdunk_scer/count"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_summary_onetcreadcount.log"
    shell:
        """
        alleyoop summary \
            --output {output.summary} \
            --tcountDir {params.tcount_dir} \
            {input.bams}
        """


##################################################################
##                      Alleyoop Summary 2                      ##
##################################################################

rule alleyoop_summary_twotcreadcount:
    input:
        bams=expand("results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        tcounts=expand("results/slamdunk_scer/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        summary="results/slamdunk_scer/alleyoop/summary_twotcreadcount.tsv",
        summary_log="results/slamdunk_scer/alleyoop/summary_twotcreadcount.log"
    params:
        tcount_dir="results/slamdunk_scer/count_twotcreadcount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_summary_twotcreadcount.log"
    shell:
        """
        alleyoop summary \
            --output {output.summary} \
            --tcountDir {params.tcount_dir} \
            {input.bams}
        """


##################################################################
##                 Alleyoop Summary Total Merged                ##
##################################################################

rule alleyoop_merge_totalreadcount:
    input:
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        merge="results/slamdunk_scer/alleyoop/merge_totalreadcount.tsv"
    params:
        column="ReadCount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_merged_totalreadcount.log"
    shell:
        """
        alleyoop merge \
            --output {output.merge} \
            --column {params.column} \
            {input}
        """


##################################################################
##                 Alleyoop Summary OneTC Merged                ##
##################################################################

rule alleyoop_merge_onetcreadcount:
    input:
        expand("results/slamdunk_scer/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        merge="results/slamdunk_scer/alleyoop/merge_onetcreadcount.tsv"
    params:
        column="TcReadCount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_merged_onereadcount.log"
    shell:
        """
        alleyoop merge \
            --output {output.merge} \
            --column {params.column} \
            {input}
        """


##################################################################
##                 Alleyoop Summary TwoTC Merged                ##
##################################################################

rule alleyoop_merge_twotcreadcount:
    input:
        expand("results/slamdunk_scer/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        merge="results/slamdunk_scer/alleyoop/merge_twotcreadcount.tsv"
    params:
        column="TcReadCount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_merged_tworeadcount.log"
    shell:
        """
        alleyoop merge \
            --output {output.merge} \
            --column {params.column} \
            {input}
        """


##################################################################
##                  Create matrices & norm factors              ##
##################################################################

counts_inputs = {
    "samples_csv": "config/samples.csv",
    "scer_total": "results/slamdunk_scer/alleyoop/merge_totalreadcount.tsv",
    "scer_oneTC": "results/slamdunk_scer/alleyoop/merge_onetcreadcount.tsv",
    "scer_twoTC": "results/slamdunk_scer/alleyoop/merge_twotcreadcount.tsv",
}
if use_spikein:
    counts_inputs.update({
        "spike_total": "results/slamdunk_spikein/alleyoop/merge_totalreadcount.tsv",
        "spike_oneTC": "results/slamdunk_spikein/alleyoop/merge_onetcreadcount.tsv",
        "spike_twoTC": "results/slamdunk_spikein/alleyoop/merge_twotcreadcount.tsv",
    })

rule counts_and_normfactors:
    input:
        **counts_inputs
    output:
        processed_targets
    params:
        outdir="results/processed",
        use_spikein="True" if use_spikein else "False",
        script="scripts/slamdunk_counts_and_normfactors.R"
    envmodules:
        config["R"]
    log:
        "results/logs/r/counts_and_normfactors.log"
    shell:
        """
        mkdir -p {params.outdir}

        if [ "{params.use_spikein}" = "True" ]; then
            Rscript {params.script} \
              {input.samples_csv} \
              {input.scer_total} \
              {input.scer_oneTC} \
              {input.scer_twoTC} \
              {params.outdir} \
              {params.use_spikein} \
              {input.spike_total} \
              {input.spike_oneTC} \
              {input.spike_twoTC} \
              > {log} 2>&1
        else
            Rscript {params.script} \
              {input.samples_csv} \
              {input.scer_total} \
              {input.scer_oneTC} \
              {input.scer_twoTC} \
              {params.outdir} \
              {params.use_spikein} \
              > {log} 2>&1
        fi
        """


##################################################################
##                     Alleyoop TcPerReadPos                    ##
##################################################################

rule alleyoop_tcperreadpos:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        tcperreadpos="results/slamdunk_scer/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.csv",
        tcperreadpos_log="results/slamdunk_scer/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.log"
    params:
        slamdunk_ref=config["scer_genome"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        snp_dir="results/slamdunk_scer/snp",
        output_dir="results/slamdunk_scer/alleyoop/tcperreadpos"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_tcperreadpos_{sample}.log"
    shell:
        """
        alleyoop tcperreadpos \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --snp-directory {params.snp_dir} \
            --max-read-length {params.max_read_length} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                     Alleyoop TcPerUtrPos                    ##
##################################################################

rule alleyoop_tcperutrpos:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        tcperutrpos="results/slamdunk_scer/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.csv",
        tcperutrpos_log="results/slamdunk_scer/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.log"
    params:
        slamdunk_ref=config["scer_genome"],
        bed_file=config["scer_bed"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        snp_dir="results/slamdunk_scer/snp",
        output_dir="results/slamdunk_scer/alleyoop/tcperutrpos"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_tcperutrpos_{sample}.log"
    shell:
        """
        alleyoop tcperutrpos \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --bed {params.bed_file} \
            --snp-directory {params.snp_dir} \
            --max-read-length {params.max_read_length} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                         Alleyoop Dump                        ##
##################################################################

rule alleyoop_dump:
    input:
        bam="results/slamdunk_scer/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        dunk="results/slamdunk_scer/alleyoop/dump/{sample}_trimmed.fastq_slamdunk_mapped_filtered_readinfo.sdunk"
    params:
        slamdunk_ref = config["scer_genome"],
        min_base_qual = config["min_base_qual"],
        snp_dir="results/slamdunk_scer/snp",
        output_dir="results/slamdunk_scer/alleyoop/dump"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_dump_{sample}.log"
    shell:
        """
        alleyoop dump \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --snp-directory {params.snp_dir} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input}
        """


##################################################################
##                  MultiQC on Slam Dunk Output                 ##
##################################################################

rule multiqc_slamdunk:
    input:
        rates_logs=expand("results/slamdunk_scer/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.log", sample=SAMPLES),
        snpeval_logs=expand("results/slamdunk_scer/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.log", sample=SAMPLES),
        tccontext_logs=expand("results/slamdunk_scer/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.log", sample=SAMPLES),
        tcperreadpos_logs=expand("results/slamdunk_scer/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.log", sample=SAMPLES),
        tcperutrpos_logs=expand("results/slamdunk_scer/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.log", sample=SAMPLES),
        utrrates_logs=expand("results/slamdunk_scer/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.log", sample=SAMPLES),
        summary_logs=["results/slamdunk_scer/alleyoop/summary_onetcreadcount.log","results/slamdunk_scer/alleyoop/summary_twotcreadcount.log"]
    output:
        "results/qc/slamdunk_scer/multiqc/multiqc_report.html"
    params:
        output_dir="results/qc/slamdunk_scer/multiqc",
        input_dir="results/slamdunk_scer/alleyoop"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/slamdunk_scer/multiqc_slamdunk_report.log"
    shell:
        """
        multiqc {params.input_dir} --outdir {params.output_dir} --quiet &> {log}
        """


##################################################################
##                   Slam Dunk All - Spike-In                   ##
##################################################################

rule slamdunk_all_spikeIn:
    input:
        fastqs="results/trimmed/{sample}_trimmed.fastq.gz"
    output:
        bams="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam",
        logs="results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.log",
        counts="results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv",
        minus_bedgraph="results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_mins.bedgraph",
        plus_bedgraph="results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount_plus.bedgraph"
    params:
        spikein_genome=config["spikein_genome"],
        spikein_bed=config["spikein_bed"],
        trim_5p=config["trim_5p"],
        topn=config["topn"],
        max_read_len=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        var_fraction=config["var_fraction"],
        min_coverage=config["min_coverage"],
        output_dir="results/slamdunk_spikein"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"],
        config["samtools"]
    log:
        "results/logs/slamdunk/slamdunk_all_spikein_{sample}.log"
    shell:
        """
        # show files input for slamdunk all
        echo "Input files: {input.fastqs}"

        # make sure directory is present 
        mkdir -p {params.output_dir}

        # run slamdunk all
        slamdunk all \
            --reference {params.spikein_genome} \
            --bed {params.spikein_bed} \
            --outputDir {params.output_dir} \
            --trim-5p {params.trim_5p} \
            --topn {params.topn} \
            --multimap \
            --min-coverage {params.min_coverage} \
            --var-fraction {params.var_fraction} \
            --max-read-length {params.max_read_len} \
            --min-base-qual {params.min_base_qual} \
            --skip-sam \
            --threads 24 \
            {input.fastqs}
        """


##################################################################
##                   Slam Dunk Count - Spike-In                 ##
##################################################################

rule slamdunk_count_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        bam_out="results/slamdunk_spikein/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv"
    params:
        genome=config["spikein_genome"],
        bed=config["spikein_bed"],
        snp_dir="results/slamdunk_spikein/snp",
        output_dir="results/slamdunk_spikein/count_twotcreadcount",
        max_read_len=config["max_read_length"],
        min_base_qual=config["min_base_qual"]
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"],
        config["samtools"]
    log:
        "results/logs/slamdunk/slamdunk_count_spikein_{sample}.log" 
    shell:
        """
        # Define the output directory
        mkdir -p {params.output_dir}

        # Run slam dunk count
        slamdunk count \
            --reference {params.genome} \
            --bed {params.bed} \
            --snp-directory {params.snp_dir} \
            --outputDir {params.output_dir} \
            --max-read-length {params.max_read_len} \
            --min-base-qual {params.min_base_qual} \
            --conversion-threshold 2 \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                        Alleyoop Rates                        ##
##################################################################

rule alleyoop_rates_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        rates="results/slamdunk_spikein/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.csv",
        rates_logs="results/slamdunk_spikein/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.log"
    params:
        slamdunk_ref=config["spikein_genome"],
        min_base_qual=config["min_base_qual"],
        output_dir="results/slamdunk_spikein/alleyoop/rates"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_rates_spikein_{sample}.log"
    shell:
        """
        alleyoop rates \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                      Alleyoop TCcontext                      ##
##################################################################

rule alleyoop_tccontext_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        tccontext="results/slamdunk_spikein/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.csv",
        tccontext_log="results/slamdunk_spikein/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.log"
    params:
        slamdunk_ref=config["spikein_genome"],
        min_base_qual=config["min_base_qual"],
        output_dir="results/slamdunk_spikein/alleyoop/tccontext"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_tccontext_spikein_{sample}.log"
    shell:
        """
        alleyoop tccontext \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                       Alleyoop UTRrates                      ##
##################################################################

rule alleyoop_utrrates_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        utrrates="results/slamdunk_spikein/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.csv",
        utrrates_log="results/slamdunk_spikein/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.log"
    params:
        slamdunk_ref=config["spikein_genome"],
        bed_file=config["spikein_bed"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        output_dir="results/slamdunk_spikein/alleyoop/utrrates"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_utrrates_spikein_{sample}.log"
    shell:
        """
        alleyoop utrrates \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --bed {params.bed_file} \
            --multiTCStringency \
            --max-read-length {params.max_read_length} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                       Alleyoop SNPeval                       ##
##################################################################

rule alleyoop_snpeval_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        snp_eval="results/slamdunk_spikein/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.csv",
        snp_eval_log="results/slamdunk_spikein/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.log"
    params:
        slamdunk_ref = config["spikein_genome"],
        bed_file = config["spikein_bed"],
        min_coverage = config["min_coverage"],
        var_fraction = config["var_fraction"],
        max_read_length = config["max_read_length"],
        min_base_qual = config["min_base_qual"],
        output_dir="results/slamdunk_spikein/alleyoop/snpeval",
        snp_dir="results/slamdunk_spikein/snp"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_snpeval_spikein_{sample}.log"
    shell:
        """
        alleyoop snpeval \
            --outputDir {params.output_dir} \
            --snp-directory {params.snp_dir} \
            --reference {params.slamdunk_ref} \
            --bed {params.bed_file} \
            --min-coverage {params.min_coverage} \
            --var-fraction {params.var_fraction} \
            --multiTCStringency \
            --max-read-length {params.max_read_length} \
            --min-base-qual {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                      Alleyoop Summary 1                      ##
##################################################################

rule alleyoop_summary_onetcreadcount_spikeIn:
    input:
        bams=expand("results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        tcounts=expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        summary="results/slamdunk_spikein/alleyoop/summary_onetcreadcount.tsv",
        summary_log="results/slamdunk_spikein/alleyoop/summary_onetcreadcount.log"
    params:
        tcount_dir="results/slamdunk_spikein/count"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_summary_onetcreadcount_spikein.log"
    shell:
        """
        alleyoop summary \
            --output {output.summary} \
            --tcountDir {params.tcount_dir} \
            {input.bams}
        """


##################################################################
##                      Alleyoop Summary 2                      ##
##################################################################

rule alleyoop_summary_twotcreadcount_spikeIn:
    input:
        bams=expand("results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam", sample=SAMPLES),
        tcounts=expand("results/slamdunk_spikein/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        summary="results/slamdunk_spikein/alleyoop/summary_twotcreadcount.tsv",
        summary_log="results/slamdunk_spikein/alleyoop/summary_twotcreadcount.log"
    params:
        tcount_dir="results/slamdunk_spikein/count_twotcreadcount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_summary_twotcreadcount_spikein.log"
    shell:
        """
        alleyoop summary \
            --output {output.summary} \
            --tcountDir {params.tcount_dir} \
            {input.bams}
        """


##################################################################
##                 Alleyoop Summary Total Merged                ##
##################################################################

rule alleyoop_merge_totalreadcount_spikeIn:
    input:
        expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        merge="results/slamdunk_spikein/alleyoop/merge_totalreadcount.tsv"
    params:
        column="ReadCount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_merged_totalreadcount_spikein.log"
    shell:
        """
        alleyoop merge \
            --output {output.merge} \
            --column {params.column} \
            {input}
        """


##################################################################
##                 Alleyoop Summary OneTC Merged                ##
##################################################################

rule alleyoop_merge_onetcreadcount_spikeIn:
    input:
        expand("results/slamdunk_spikein/count/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        merge="results/slamdunk_spikein/alleyoop/merge_onetcreadcount.tsv"
    params:
        column="TcReadCount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_merged_onereadcount_spikein.log"
    shell:
        """
        alleyoop merge \
            --output {output.merge} \
            --column {params.column} \
            {input}
        """


##################################################################
##                 Alleyoop Summary TwoTC Merged                ##
##################################################################

rule alleyoop_merge_twotcreadcount_spikeIn:
    input:
        expand("results/slamdunk_spikein/count_twotcreadcount/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcount.tsv", sample=SAMPLES)
    output:
        merge="results/slamdunk_spikein/alleyoop/merge_twotcreadcount.tsv"
    params:
        column="TcReadCount"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_merged_tworeadcount_spikein.log"
    shell:
        """
        alleyoop merge \
            --output {output.merge} \
            --column {params.column} \
            {input}
        """


##################################################################
##                     Alleyoop TcPerReadPos                    ##
##################################################################

rule alleyoop_tcperreadpos_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        tcperreadpos="results/slamdunk_spikein/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.csv",
        tcperreadpos_log="results/slamdunk_spikein/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.log"
    params:
        slamdunk_ref=config["spikein_genome"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        snp_dir="results/slamdunk_spikein/snp",
        output_dir="results/slamdunk_spikein/alleyoop/tcperreadpos"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_tcperreadpos_spikein_{sample}.log"
    shell:
        """
        alleyoop tcperreadpos \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --snp-directory {params.snp_dir} \
            --max-read-length {params.max_read_length} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                     Alleyoop TcPerUtrPos                    ##
##################################################################

rule alleyoop_tcperutrpos_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        tcperutrpos="results/slamdunk_spikein/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.csv",
        tcperutrpos_log="results/slamdunk_spikein/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.log"
    params:
        slamdunk_ref=config["spikein_genome"],
        bed_file=config["spikein_bed"],
        max_read_length=config["max_read_length"],
        min_base_qual=config["min_base_qual"],
        snp_dir="results/slamdunk_spikein/snp",
        output_dir="results/slamdunk_spikein/alleyoop/tcperutrpos"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_tcperutrpos_spikein_{sample}.log"
    shell:
        """
        alleyoop tcperutrpos \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --bed {params.bed_file} \
            --snp-directory {params.snp_dir} \
            --max-read-length {params.max_read_length} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input.bam}
        """


##################################################################
##                         Alleyoop Dump                        ##
##################################################################

rule alleyoop_dump_spikeIn:
    input:
        bam="results/slamdunk_spikein/filter/{sample}_trimmed.fastq_slamdunk_mapped_filtered.bam"
    output:
        dunk="results/slamdunk_spikein/alleyoop/dump/{sample}_trimmed.fastq_slamdunk_mapped_filtered_readinfo.sdunk"
    params:
        slamdunk_ref = config["spikein_genome"],
        min_base_qual = config["min_base_qual"],
        snp_dir="results/slamdunk_spikein/snp",
        output_dir="results/slamdunk_spikein/alleyoop/dump"
    envmodules:
        config["slamdunk"],
        config["nextgenemap"],
        config["varscan"]
    log:
        "results/logs/alleyoop/alleyoop_dump_spikein_{sample}.log"
    shell:
        """
        alleyoop dump \
            --outputDir {params.output_dir} \
            --reference {params.slamdunk_ref} \
            --snp-directory {params.snp_dir} \
            --min-basequality {params.min_base_qual} \
            --threads 24 \
            {input}
        """


##################################################################
##                  MultiQC on Slam Dunk Output                 ##
##################################################################

rule multiqc_slamdunk_spikeIn:
    input:
        rates_logs=expand("results/slamdunk_spikein/alleyoop/rates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_overallrates.log", sample=SAMPLES),
        snpeval_logs=expand("results/slamdunk_spikein/alleyoop/snpeval/{sample}_trimmed.fastq_slamdunk_mapped_filtered_SNPeval.log", sample=SAMPLES),
        tccontext_logs=expand("results/slamdunk_spikein/alleyoop/tccontext/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tccontext.log", sample=SAMPLES),
        tcperreadpos_logs=expand("results/slamdunk_spikein/alleyoop/tcperreadpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperreadpos.log", sample=SAMPLES),
        tcperutrpos_logs=expand("results/slamdunk_spikein/alleyoop/tcperutrpos/{sample}_trimmed.fastq_slamdunk_mapped_filtered_tcperutr.log", sample=SAMPLES),
        utrrates_logs=expand("results/slamdunk_spikein/alleyoop/utrrates/{sample}_trimmed.fastq_slamdunk_mapped_filtered_mutationrates_utr.log", sample=SAMPLES),
        summary_logs=["results/slamdunk_spikein/alleyoop/summary_onetcreadcount.log","results/slamdunk_spikein/alleyoop/summary_twotcreadcount.log"]
    output:
        "results/qc/slamdunk_spikein/multiqc/multiqc_report.html"
    params:
        output_dir="results/qc/slamdunk_spikein/multiqc",
        input_dir="results/slamdunk_spikein/alleyoop"
    envmodules:
        config["multiqc"]
    log:
        "results/logs/multiqc/slamdunk_spikein/multiqc_slamdunk_report_spikein.log"
    shell:
        """
        multiqc {params.input_dir} --outdir {params.output_dir} --quiet &> {log}
        """
